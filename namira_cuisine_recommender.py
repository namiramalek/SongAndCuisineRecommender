# -*- coding: utf-8 -*-
"""namira_cusine_recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tVXBu53x-dgJZadyPXu0fswxd-0rL3a6
"""

import numpy as np
import json
import pandas as pd

data = pd.read_json('/content/recipies.json')

data.head()

data.shape

#Note the total number of instances of recipes
total_recipes= len(data)
print("total number of instances of recipes: ",total_recipes)

#Note the number of cuisines available in the data
total_cuisines=data.cuisine.unique()
number_total_cuisines=len(data.cuisine.unique())
print("number of cuisines available in the data :",number_total_cuisines)

#Create a table illustrating each cuisine type and number of recipes available in the file related to that cuisine
print(data.groupby('cuisine').size())

total_cuisines

"""Your app should receive a ‘cuisine type’ as input from the user, for example, ‘Greek’, ‘Italian’…etc. If the ‘cuisine type’ is not available, then reply to the user “We don’t have recommendations for XXX” where XXX is the inputted cuisine type."""

!pip install apyori

from apyori import apriori
from apyori import load_transactions

"""Analyze all the ingredients available under the inputted “cuisine type” using the apriori algorithm, according to the following parameters:

Set the support value to 100/total # of recipes for the selected cuisine’

Set the confidence value to 0.5
"""

def myApp():
 while (True):
  cuisine = input("Enter cuisine type: ")
  
  if cuisine.lower() == "exit":
            break
  
  if (cuisine not in total_cuisines):
    print(f"We don’t have recommendations for {cuisine}")
    continue

  if(cuisine in list(data['cuisine'])):
            # support value to 100/total # of recipes for the selected cuisine
            len_recipies_for_selected_cuisine=len(list(data.ingredients[data['cuisine'] == cuisine]))
            association_rules = apriori(list(data.ingredients[data['cuisine'] == cuisine]), 
                                        min_support=100/len_recipies_for_selected_cuisine, 
                                        min_confidence=0.5, min_lift=1.0,
                                        max_length=None)
    
            association_rules = list(association_rules)
            
            #The top group of ingredients that the algorithm calculates for the inputted cuisine type
            print('The top group of ingredients (the most frequent dataset): ', list(association_rules[0].items))
            
            #All rules with lift value greater than two
            print('All rules with lift value greater than two: ')
            
            for item in association_rules:
                print((association_rules[item[2][0][3]>2]))

myApp()